"""""""""""""""""""""""
"  pielgrzym's vimrc  "
"""""""""""""""""""""""

" General initialization {{{1
set nocompatible "Turns off vi compatibility - adds cool functionality
scriptencoding utf-8 " fix utf-related errors
set encoding=utf-8 " fix utf-related errors
filetype off
" Neobundle setup {{{1
" Note: Skip initialization for vim-tiny or vim-small.
if !1 | finish | endif
" Setting up Vundle - the vim plugin bundler
" Credit: http://www.erikzaadi.com/2012/03/19/auto-installing-vundle-from-your-vimrc/
let iCanHazVundle=1
let neobundle_readme=expand('~/.vim/bundle/neobundle.vim/README.md')
if !filereadable(neobundle_readme)
    echo "Installing neobundle.vim."
    echo ""
    silent !mkdir -p ~/.vim/bundle
    silent !git clone https://github.com/Shougo/neobundle.vim ~/.vim/bundle/neobundle.vim
    let iCanHazVundle=0
endif

if has('vim_starting')
        set nocompatible               " Be iMproved

        " Required:
        set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

" Required:
call neobundle#begin(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
NeoBundleFetch 'Shougo/neobundle.vim'
" Neobundle bundles {{{1
NeoBundle "Shougo/neocomplcache.git"
NeoBundle "SirVer/ultisnips.git"
NeoBundle "bling/vim-airline.git"
NeoBundle "blueyed/vim-autoclose.git"
NeoBundle "chase/vim-ansible-yaml", {'rev': '6c554c78d831e88376ce5ca5d9664c87ffaba6ab'}
NeoBundle "edkolev/tmuxline.vim.git"
NeoBundle "endel/ctrlp-filetype.vim.git"
NeoBundle "evanmiller/nginx-vim-syntax.git"
NeoBundle "gregsexton/gitv.git"
NeoBundle "groenewege/vim-less.git" " *.less syntax highlighting
NeoBundle "jmcantrell/vim-virtualenv.git"
NeoBundle "kchmck/vim-coffee-script.git" " *.coffee syntax highligting
NeoBundle "kien/ctrlp.vim.git"
NeoBundle "klen/python-mode.git"
NeoBundle "majutsushi/tagbar.git"
NeoBundle "mattn/gist-vim.git"
NeoBundle "mattn/webapi-vim.git"
NeoBundle "mephux/bro.vim.git" " *.bro syntax highlighting
NeoBundle "mustache/vim-mustache-handlebars.git"
NeoBundle "nono/vim-handlebars.git"
NeoBundle "pangloss/vim-javascript.git"
NeoBundle "pielgrzym/ctrlp-sessions.git"
NeoBundle "sjl/gundo.vim.git"
NeoBundle "tmatilai/gitolite.vim.git" " gitolite config syntax highlighting
NeoBundle "tomtom/tcomment_vim.git"
NeoBundle "tomtom/tlib_vim.git"
NeoBundle "tomtom/trag_vim.git"
NeoBundle "tpope/vim-fugitive.git"
NeoBundle "tpope/vim-rails.git"
NeoBundle "tpope/vim-repeat.git"
NeoBundle "tpope/vim-sleuth.git"
NeoBundle "tpope/vim-surround.git"
NeoBundle "tpope/vim-unimpaired.git", { 'rev': 'a3492ee2058a2ef62e883f909bf50bc135077748' }
NeoBundle "jeetsukumaran/vim-filebeagle"
NeoBundle "vim-scripts/L9.git"
NeoBundle "vim-scripts/TVO--The-Vim-Outliner.git"
NeoBundle "vim-scripts/YankRing.vim"
NeoBundle "vim-scripts/matchit.zip.git"
NeoBundle 'honza/vim-snippets'
NeoBundle 't9md/vim-ruby-xmpfilter'
" Other NeoBundle stuff {{{2
call neobundle#end()

filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck
set t_Co=256 " without this line tmux/screen will do *bad* things to colors, dude
" Colorscheme {{{1
set background=dark
colorscheme molokai
" Options {{{1
set fencs=utf-8,iso-8859-2,cp1250 "Resolve encoding problems
set autoread "Set to auto read when a file is changed from the outside
set hidden "Enables changing buffer without saving
set history=2000 "Sets how many lines of history VIM has to remember
set ssop=blank,buffers,curdir,folds,localoptions,tabpages,winpos,winsize "Session options
set viminfo='500,<1000,s100,f1,n~/.viminfo "Remember marks, registers (up to 100kb)
set ignorecase " case insensitive search
set incsearch " incremental search FTW
set smartcase " make searches case-insensitive, unless they contain upper-case letters:
set scrolljump=7
set pastetoggle=<F12>
set modelines=1
set cursorline " cool cursor
set backspace=indent,eol,start " backspacing over all sorts of stuff
filetype plugin on "Enable filetype plugin
filetype indent on "Enable indenting plugin
" Keep search matches in the middle of the window.
nnoremap n nzzzv
nnoremap N Nzzzv
" same when jumping to changes!
nnoremap g; g;zz
nnoremap g, g,zz
" always open help in new tab instead of split:
cabbrev he tab help
cabbrev help tab help
set nowrap
set sidescroll=5 "when moving in the file horizontally move 5 columns a time
set listchars+=precedes:←,extends:→ " nice indicators that there is more text horizontally
" Backup options {{{2
set nobackup
set nowritebackup
"set directory=~/.vbk "Place swap files in a hidden dir
set undofile "persisent undo! new in vim 7.3!
set noswapfile
set undodir=~/.vimundo
" User interface and text formatting {{{2
set number "Show line numbers
set wildmenu "Turn on WiLd menu
" wildignore taken from Steve Losh's config:
set wildignore+=.hg,.git,.svn " Version control
set wildignore+=*.aux,*.out,*.toc " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg " binary images
set wildignore+=*.luac " Lua byte code
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.pyc " Python byte code
set wildignore+=*.sw? " Vim swap files
set shortmess=atI "Remove greeting msg and 'press a key' msgs
set laststatus=2 "Statusline always visible
set statusline=[%n]\ %f%-m%-r%-h%-w\ [%Y]\ [%l/%L\]\ %{fugitive#statusline()}\ [%p%%] "Better statusline format
"get rid of gvim toolbars and stuff
set guioptions=
set guifont=Meslo\ LG\ S\ for\ Powerline\ 8
if has("gui_macvim")
        set guifont=Terminus\ Medium\ for\ Powerline:h14
endif
" Resize splits when the window is resized
" au VimResized * exe "normal! \<c-w>="
set noea " no equalalways - closing a window will not resize other!
" text formatting
set expandtab "Use spaces to create tabs
set ai "Auto indent
set si "Smart indet
syntax on "Enable syntax highligting
" Autocompletion {{{2
set completeopt=longest,menuone,preview
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType php set omnifunc=phpcomplete#CompletePHP
autocmd FileType c set omnifunc=ccomplete#Complete
" Global Keymappings {{{1
"Leader key under '\' is totally inconvenient, remapping to ','
let mapleader = "\<Space>"
let maplocalleader = ","
" Quick edit vimrc:
nnoremap <leader>ev :tabnew $MYVIMRC<cr>
" Quick source vimrc:
nnoremap <leader>sv :source $MYVIMRC<cr>
nnoremap <silent> <Leader>w :set nowrap!<CR>
nnoremap <silent> <C-k> :tabp<CR>
nnoremap <silent> <C-j> :tabn<CR>
nnoremap <silent> <Leader>x :MkS<CR>
nnoremap <silent> <Leader>X :MkS <CR> :qal<CR>
let g:lasttab = 1
nnoremap <leader><leader> :exe "tabn ".g:lasttab<CR>
au TabLeave * let g:lasttab = tabpagenr()
" cmap in case we've forgotten to sudo vim before editing file ;)
cmap `w w !sudo tee >/dev/null %
" git reset file changes
cmap `r Git checkout -- %
" Gundo {{{1
nnoremap <F5> :GundoToggle<CR>
" Tagbar {{{1
nnoremap <silent> <Leader>l :TagbarOpenAutoClose<CR>
let g:tagbar_left = 1
let g:tagbar_compact = 1
" CtrlP {{{1
nnoremap <silent> <Leader>f :CtrlPBuffer<CR>
nnoremap <silent> <Leader>F :CtrlPFiletype<CR>
" show pylint window. PURRRRRFECT!!!
nnoremap <silent> <Leader>e :CtrlPQuickfix<CR>
" jump between changes in buffer:
nnoremap <silent> <Leader>c :CtrlPChange<CR>
nnoremap <silent> <Leader>o :CtrlP<CR>
" nnoremap <silent> <Leader>d :CtrlPTag<CR>
nnoremap <silent> <Leader>t :CtrlPBufTag<CR>
nnoremap <silent> <Leader>T :CtrlPBufTagAll<CR>
nnoremap <silent> <Leader>` :CtrlPSessions<CR>
let g:ctrlp_cmd = 'CtrlPMRU' " show all mru by default
let g:ctrlp_mruf_relative = 1 " only mru from current workdir
let g:ctrlp_working_path_mode = 'r' " set path to nearest parent containing .git
" let g:ctrlp_user_command = ['.git/', 'cd %s && git ls-files'] " use git to search for files
let g:ctrlp_open_multi = 3 " open max 3 splits when multiple files are being opened
let g:ctrlp_switch_buffer = 0 " allows to open one buffer more than once
let g:ctrlp_mruf_exclude = 'media/tinymce/.*\|static/tinymce/.*' " ignore those parts of django proj
let g:ctrlp_follow_symlinks = 1 " prooves quite usefull
let g:ctrlp_extensions = ['sessions', 'filetype', 'tags', 'line']
let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
let g:ctrlp_use_caching = 0
if getcwd() == $HOME."/.homesick/repos/dotfiles"
        let g:ctrlp_user_command = 'ag %s -l --hidden --nocolor -g "" --ignore .git'
endif
" Neocomplcache {{{1
let g:neocomplcache_enable_at_startup = 1
let g:neocomplcache_enable_smart_case = 1
let g:neocomplcache_enable_underbar_completion = 1 " c_p -> compeltion -> current_page
inoremap <expr><C-x> neocomplcache#smart_close_popup()."\<C-x>"
inoremap <expr><CR>  neocomplcache#smart_close_popup() . "\<CR>"
" OTL {{{1
"let otl_map_tabs = 1
let g:otl_bold_headers = 0
augroup ft_otl
        autocmd!
        autocmd FileType otl nested NeoComplCacheLock
        autocmd FileType otl set noexpandtab
        autocmd FileType otl set tabstop=4
        autocmd FileType otl set shiftwidth=4
        autocmd FileType otl let g:ctrlp_switch_buffer = 'Et' " allows to open one buffer more than once
        function! Jump2inbox(ctx)
                :normal 1gt
                :normal gg
                :call search(a:ctx)
                execute "normal! o\<tab>"
                startinsert!
        endfunction
        function! AutoCommit()
                let commit_msg = expand('%:t')
                silent! execute "!git commit -a -m \"".commit_msg."\""
                redraw!
        endfunction
        autocmd BufWritePost *.otl :call AutoCommit()
        noremap <localleader>ip :call Jump2inbox("PRIV")<CR>
        noremap <localleader>ib :call Jump2inbox("BASE")<CR>
        noremap <localleader>, :call Jump2inbox("BASE")<CR>
        noremap <localleader>. :call Jump2inbox("PRIV")<CR>
        noremap <LocalLeader>v :call TrelloInbox()<CR>
augroup END
" Ultisnips {{{1
" let g:UltiSnipsExpandTrigger="<C-l>"
" let g:UltiSnipsJumpForwardTrigger="<tab>"
" let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsEditSplit="vertical"
" Rope {{{1
" let ropevim_goto_def_newwin=1
" map <leader>j :RopeGotoDefinition<CR>
map <localleader>r :RopeRename<CR>
" Bash/zsh/etc {{{1
augroup ft_bash
        autocmd!
        autocmd FileType bash,sh,zsh set ai sw=4 sts=4 et
augroup END
" Puppet {{{1
augroup ft_puppet
        autocmd!
        autocmd FileType puppet set ai sw=2 sts=2 et
augroup END
" Ruby {{{1
augroup ft_ruby
        autocmd!
        autocmd FileType ruby,eruby,yaml set ai sw=2 sts=2 et
        autocmd FileType ruby,eruby,yaml nmap <buffer> <leader>rci :%!ruby-code-indenter<cr>
augroup END
" Vagrant {{{1
augroup ft_vagrant
        autocmd!
        autocmd BufRead Vagrantfile set ft=ruby
augroup END
" Nginx {{{1
function! NginxFt()
        autocmd BufRead *.conf set filetype=nginx
endfunction
augroup ft_nginx
        autocmd!
        autocmd BufRead nginx.conf set ft=nginx
        call NginxFt()
augroup END
" Python {{{1
let python_highlight_all = 1
augroup ft_python
        autocmd!
        autocmd FileType python set omnifunc=pythoncomplete#Complete
        " autocmd FileType python set ft=python.django " For SnipMate
        autocmd FileType python set nosmartindent " For SnipMate
        autocmd FileType python iabbrev <buffer> dfe def
        autocmd FileType python iabbrev <buffer> exept except
        autocmd FileType python iabbrev <buffer> ecxept except
        " enable django models snippets if filename models.py
        function! GetCustomSnippets()
                let fname = expand('%:t')
                if fname == 'models.py'
                        :UltiSnipsAddFiletypes dj_models.dj_all.python
                elseif  fname == 'urls.py'
                        :UltiSnipsAddFiletypes dj_urls.dj_all.python
                elseif  fname == 'admin.py'
                        :UltiSnipsAddFiletypes dj_admin.dj_all.python
                elseif  fname == 'views.py'
                        :UltiSnipsAddFiletypes dj_views.dj_all.python
                endif
        endfunction
        " hit T to run doctests for current file and output errors into
        " new vertical split buffer
        function! RunDoctests()
                let fname = expand('%:p')
                :silent w
                :silent vne 'python_doctest_result'
                :set ft=python
                :set buftype=nofile
                :setlocal noswapfile
                :exec ':silent r!python2 -m doctest -f' fname
                :nnoremap <buffer> q :bd<cr>
        endfunction
        autocmd FileType python nnoremap T :call RunDoctests()<cr>

        autocmd FileType python :call GetCustomSnippets()
        " below two mapping to make for example:
        " from django.db import models
        " with cursor over this line cif will remove django.db and place
        " cursor there in insert mode
        " cii will remove stuff after the import statement
        autocmd FileType python onoremap <buffer> if :<c-u>normal! 0f <space>vt <cr>
        autocmd FileType python onoremap <buffer> ii :<c-u>execute "normal! 0/import\rwvg_"<cr>
augroup END
" Python mode {{{1
let g:pymode_run_key = '<localleader>R'
let g:pymode_rope_goto_def_newwin = 'new'
let g:pymode_lint_checker = "pyflakes,pep8"
let g:pymode_lint_config = '/home/pielgrzym/.vim/pylint.ini'
let g:pymode_lint_cwindow = 0
let g:pymode_folding = 0
let g:pymode_syntax = 1
nnoremap <F4> :PyLintWindowToggle<CR>
" Gist {{{1
let g:gist_detect_filetype = 1
let g:gist_open_browser_after_post = 1
if has("unix")
  let s:uname = system("uname -s")
  if s:uname == "Darwin"
    " Mac stuff here
    let g:gist_browser_command = 'open %URL%'
    let g:gist_clip_command = 'pbcopy'
  else
    let g:gist_browser_command = 'chromium %URL%'
    let g:gist_clip_command = 'xclip -selection clipboard'
  endif
endif
" Gitcommit {{{1
" Gitcommit folding by: ecneladis
" https://github.com/ecneladis/planet-earth/commit/72bdb05e418d505139bf7198fc81f479c0edcfdf
augroup ft_gitcommit
  autocmd!
  au FileType gitcommit setlocal foldmethod=expr
  au FileType gitcommit setlocal foldexpr=GitDiffFolding(v:lnum)
  au FileType gitcommit setlocal foldtext=set foldtext=GitDiffFoldText()

  function! GitDiffFoldText()  
    let filename_regex = "diff --git a[^ ]* b/"
    return substitute(getline(v:foldstart), filename_regex, "", 'g')
  endf

  function! GitDiffFolding(lnum)
    if getline(a:lnum) =~? '\v^diff --git'
        return '>1'
    endif
    return '=' 
  endf

augroup END
" Templates {{{1
autocmd BufNewFile * silent! 0r ~/.vim/templates/%:e.tpl
" XML {{{1
augroup ft_xml
        autocmd!
        autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
        autocmd FileType xml  let g:AutoClosePairs = {'(': ')', '{': '}', '[': ']', '"': '"', "'": "'", '`': '`', '«': '»'}
augroup END
" Handlebars {{{1
augroup ft_handlebars
        autocmd!
        autocmd FileType handlebars set ai sw=2 sts=2 et
augroup END
" Html {{{1
augroup ft_html
        autocmd!
        autocmd FileType xhtml,html,html4 set ai sw=2 sts=2 et
        autocmd FileType htmldjango set commentstring={#\ %s\ #}
augroup END
" Css {{{1
augroup ft_css
       autocmd!
       au BufNewFile,BufRead *.less,*.css setlocal foldmethod=marker
       au BufNewFile,BufRead *.less,*.css setlocal foldmarker={,}
       au BufNewFile,BufRead *.less,*.css nnoremap <buffer> <leader>S ?{<CR>jV/\v^\s*\}?$<CR>k:sort<CR>:noh<CR>
augroup END
" Java {{{1
augroup ft_java
        autocmd!
        autocmd FileType java set noexpandtab
        autocmd FileType java set tabstop=4
        autocmd FileType java set shiftwidth=4
        autocmd FileType java set makeprg=ant\ clean\ install\ -emacs
        autocmd FileType java map <F9> :make<CR>
        autocmd FileType java map <F10> :cp<CR>
        autocmd FileType java map <F11> :cn<CR>
        autocmd FileType java set cinoptions+=jl
        autocmd FileType java nnoremap <silent> <Leader>t :TagbarToggle<CR>
augroup END
" PHP {{{1
let php_sql_query = 1 "Highlight SQL queries inside php
let php_htmlInStrings = 1 "Highlight HTML inside php strings
"Highlight drupal's .module files as php {{{2
if has("autocmd")
  augroup module
  autocmd BufRead *.module set filetype=php
  autocmd BufRead *.mako set filetype=mako
  augroup END
endif
" Vimscript file settings {{{1
augroup filetype_vim
    au!
    au FileType vim setlocal foldmethod=marker
augroup END
" Airline {{{1
let g:airline_powerline_fonts = 1
let g:airline_theme='murmur'
let g:airline_detect_whitespace=0
" let g:airline#extensions#tabline#enabled = 1
let g:airline_mode_map = {'R': 'R', 'c': 'CMD   ', 'V': 'VL', 'v': 'V', 'i': 'I', '^V': 'VB', 'n': 'N'}
" Tmuxline {{{1
let g:tmuxline_preset = {
        \ 'a': '#S',
        \ 'b': '#F',
        \ 'win': ['#I', '#W'],
        \ 'cwin': ['#I', '#W'],
        \ 'x': '#(tmux-loadavg)',
        \ 'y': ['%a %b %d ', '%R'],
        \ 'z': '#h',
        \'options' : {'status-justify' : 'left'}}
" xmpfilter {{{1
autocmd FileType ruby nmap <buffer> <Leader>e <Plug>(xmpfilter-mark)
autocmd FileType ruby xmap <buffer> <Leader>e <Plug>(xmpfilter-mark)
autocmd FileType ruby imap <buffer> <Leader>e <Plug>(xmpfilter-mark)

autocmd FileType ruby nmap <buffer> <Leader>E <Plug>(xmpfilter-run)
autocmd FileType ruby xmap <buffer> <Leader>E <Plug>(xmpfilter-run)
autocmd FileType ruby imap <buffer> <Leader>E <Plug>(xmpfilter-run)
" FileBeagle {{{1
let g:filebeagle_suppress_keymaps = 1
map <silent> <Leader>-  <Plug>FileBeagleOpenCurrentWorkingDir
map <silent> -          <Plug>FileBeagleOpenCurrentBufferDir
"
